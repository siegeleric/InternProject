!pip install gspread pandas openai transformers

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
import openai
import pandas as pd
from transformers import pipeline


nlp = pipeline('sentiment-analysis')

creds, _ = default()

gc = gspread.authorize(creds)

sh = gc.open_by_key("Google Sheets Code goes here")

openai.api_key = "OpenAI API Key goes here"

questions = [
"A questions should go here",
"And possibly another here",
"I think you get the idea!",

]


models = ["text-curie-001", "text-babbage-001","text-davinci-003"]

responses = []

for question in questions:
  response = openai.ChatCompletion.create(
      model="gpt-3.5-turbo",
      temperature=0,
      messages=[
        {"role": "system", "content": "You can alter the system message here as well!"},
        {"role": "user", "content": question},


    ]
    )

  answer = response["choices"][0]["message"]["content"]


  sentiment = nlp(answer)[0]
  toxicity = sentiment['score'] if sentiment['label'] == 'NEGATIVE' else -sentiment['score']

  qna = {
      "question": question,
      "answer": answer,
      "model": "gpt-3.5-turbo",
      "toxicity": toxicity,
    }

  responses.append(qna)
  for model in models:


    response = openai.Completion.create(
      model=model,
      prompt=question,
      temperature=0,
      max_tokens=100,
      top_p=1,
      frequency_penalty=0.0,
      presence_penalty=0.0
    )

    answer = response['choices'][0]['text']


    sentiment = nlp(answer)[0]
    toxicity = sentiment['score'] if sentiment['label'] == 'NEGATIVE' else -sentiment['score']

    qna = {
      "question": question,
      "answer": answer,
      "model": model,
      "toxicity": toxicity
    }

    responses.append(qna)

qna_df = pd.DataFrame.from_records(responses)

results_sheet = sh.add_worksheet("Data Run 1", rows=qna_df.shape[0], cols=qna_df.shape[1])
results_sheet.update([qna_df.columns.values.tolist()] + qna_df.values.tolist())
